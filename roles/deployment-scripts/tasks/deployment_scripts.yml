---
# Tasks file for installing and initial run of deployment scripts

- name: Download deployment scripts
  block:
    - name: Clean artifact path
      file:
        state: absent
        path: "{{ deployment_scripts.destination }}"
      when: deployment_scripts.destination != ""

    - name: Get status of deployment destination directory
      stat: path="{{ deployment_scripts.destination }}"
      register: deployment_destination

    - name: Create deployment destination if not present
      file:
        path: "{{ deployment_scripts.destination }}"
        state: directory
      when: deployment_destination.stat.exists

    - name: Clone deployment repository path
      shell: "git clone {{ deployment_scripts.url }} {{ deployment_scripts.destination }}"

- name: Parse production destination paths
  block:
    - name: Build deployment production global config path
      file:
        path: "{{ deployment_scripts.destination }}/{{ deployment_scripts.prod_config }}"
      register: deployment_prod_config_file

    - name: Parse production global config YAML file
      set_fact:
        prod_config: "{{ lookup('file', deployment_prod_config_file.path) | from_yaml }}"

- include_tasks: create_destination_directory.yml
  with_items: "{{ lookup('dict', prod_config.directories) }}"
  loop_control:
    loop_var: dest_dir

- name: Parse test destination paths
  block:
    - name: Build deployment test global config path
      file:
        path: "{{ deployment_scripts.destination }}/{{ deployment_scripts.test_config }}"
      register: deployment_test_config_file

    - name: Parse test global config YAML file
      set_fact:
        test_config: "{{ lookup('file', deployment_test_config_file.path) | from_yaml }}"

- include_tasks: create_destination_directory.yml
  with_items: "{{ lookup('dict', test_config.directories) }}"
  loop_control:
    loop_var: dest_dir

- name: Check that there are no temporary changes
  block:
    - name: Check whether checksum log file exists
      stat: path="{{ deployment_scripts.checksum_log }}"
      register: checksum_log_status

    - name: Touch checksum log file if it doesn't exist
      shell: "touch {{ deployment_scripts.checksum_log }}"
      when: not checksum_log_status.stat.exists

    - name: Run checksum script
      shell: "{{activate_deployment_env}} && ./check_deployment_checksums.pl {{ deployment_scripts.checksum_log }}"
      args:
        chdir: "{{ deployment_scripts.destination }}"
      register: checksum_result

    - name: Fail when there is output from the checksum script
      fail: msg="Failed as there were errors from check_deployment_checksums.pl"
      when: checksum_result.stdout != ""

- name: Run test deployment
  shell: "{{activate_deployment_env}} && ./deploy.pl -e test"
  args:
    chdir: "{{ deployment_scripts.destination }}"
  when: checksum_result.stdout == ""

